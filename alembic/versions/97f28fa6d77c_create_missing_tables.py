"""create missing tables
Revision ID: 97f28fa6d77c
Revises: 72c808426f98
Create Date: 2025-08-05 16:19:48.422560
"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import reflection


# revision identifiers, used by Alembic.
revision: str = "97f28fa6d77c"
down_revision: Union[str, None] = "72c808426f98"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name):
    bind = op.get_bind()
    if bind is None:
        return False
    inspector = reflection.Inspector.from_engine(bind)
    return table_name in inspector.get_table_names()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if table_exists("taxonomy_synonyms"):
        op.drop_index("ix_taxonomy_synonyms_synonym", table_name="taxonomy_synonyms")
        op.drop_index("ix_taxonomy_synonyms_id", table_name="taxonomy_synonyms")
        op.drop_table("taxonomy_synonyms")

    if table_exists("taxonomy_terms"):
        op.drop_index("ix_taxonomy_terms_term", table_name="taxonomy_terms")
        op.drop_index("ix_taxonomy_terms_subcategory", table_name="taxonomy_terms")
        op.drop_index("ix_taxonomy_terms_primary_category", table_name="taxonomy_terms")
        op.drop_index("ix_taxonomy_terms_id", table_name="taxonomy_terms")
        op.drop_table("taxonomy_terms")
    # ### end Alembic commands ###


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists("taxonomy_terms"):
        op.create_table(
            "taxonomy_terms",
            sa.Column("id", sa.INTEGER(), nullable=False),
            sa.Column("term", sa.VARCHAR(length=255), nullable=False),
            sa.Column("primary_category", sa.VARCHAR(length=255), nullable=False),
            sa.Column("subcategory", sa.VARCHAR(length=255), nullable=True),
            sa.Column("description", sa.TEXT(), nullable=True),
            sa.Column(
                "created_at",
                sa.TIMESTAMP(),
                server_default=sa.text("now()"),
                nullable=True,
            ),
            sa.Column("parent_id", sa.INTEGER(), nullable=True),
            sa.ForeignKeyConstraint(
                ["parent_id"],
                ["taxonomy_terms.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index("ix_taxonomy_terms_id", "taxonomy_terms", ["id"], unique=False)
        op.create_index(
            "ix_taxonomy_terms_primary_category",
            "taxonomy_terms",
            ["primary_category"],
            unique=False,
        )
        op.create_index(
            "ix_taxonomy_terms_subcategory",
            "taxonomy_terms",
            ["subcategory"],
            unique=False,
        )
        op.create_index(
            "ix_taxonomy_terms_term", "taxonomy_terms", ["term"], unique=False
        )

    if not table_exists("taxonomy_synonyms"):
        op.create_table(
            "taxonomy_synonyms",
            sa.Column("id", sa.INTEGER(), nullable=False),
            sa.Column("taxonomy_id", sa.INTEGER(), nullable=False),
            sa.Column("synonym", sa.VARCHAR(length=255), nullable=False),
            sa.Column(
                "created_at",
                sa.TIMESTAMP(),
                server_default=sa.text("now()"),
                nullable=True,
            ),
            sa.ForeignKeyConstraint(
                ["taxonomy_id"],
                ["taxonomy_terms.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            "ix_taxonomy_synonyms_id", "taxonomy_synonyms", ["id"], unique=False
        )
        op.create_index(
            "ix_taxonomy_synonyms_synonym",
            "taxonomy_synonyms",
            ["synonym"],
            unique=False,
        )
    # ### end Alembic commands ###
